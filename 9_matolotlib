# Python
关于我学习Python那回事

scatter.py:

import matplotlib.pyplot as plt

plt.scatter(2,4,s=200)
# 设置图标标题和字体大小
plt.title('title',fontsize=18)
plt.xlabel('xlabel',fontsize=18)
plt.ylabel('ylabel',fontsize=18)
# 设置刻度标记大小
plt.tick_params(axis='both',which='major',labelsize=14)
plt.show()

scatter_1.py:

import matplotlib.pyplot as plt

x = list(range(1,101))
y = [a**2 for a in x]
plt.scatter(x,y,c=y,cmap=plt.cm.Reds,edgecolor='none',s=50)
# 设置图标标题和字体大小
plt.title('title',fontsize=18)
plt.xlabel('xlabel',fontsize=18)
plt.ylabel('ylabel',fontsize=18)
# 设置每个坐标轴的取值范围
plt.axis([0,100,0,10000])
plt.show()

随机漫步1.1：
randomwalk.py:

from random import choice

class Randomwalk():
    """生成一个随机漫步的分类"""
    def __init__(self,num=10000):
        """初始化随机漫步属性"""
        self.num = num

        # 所有随机漫步都开始于(0,0)
        self.x = [0]
        self.y = [0]
    def fill_walk(self):
        """计算随机漫步包含的所有点"""

        # 不断漫步，直到列表达到指定的长度
        while len(self.x) < self.num:
            """决定前进方向以及沿这个方向前进的距离"""
            x_direction = choice([1,-1])
            x_distance = choice([0,1,2,])
            x_step = x_direction * x_distance

            y_direction = choice([1,-1])
            y_distance = choice([0,1,2])
            y_step = y_direction * y_distance

            # 拒绝原地踏步
            if x_step == 0 and y_step == 0:
                continue

            # 计算下一个点的x和y值
            next_x = self.x[-1] + x_step
            next_y = self.y[-1] + y_step

            self.x.append(next_x)
            self.y.append(next_y)
 walk.py:
 import matplotlib.pyplot as plt

from randomwalk import Randomwalk

# 只要程序处于活动状态，就多次模拟随机漫步
while True:
    rw = Randomwalk()
    rw.fill_walk()

    # 设置绘图窗口尺寸
    plt.figure(figsize=(10,6))

    # 设置基础点的颜色映射
    point_numbers = list(range(rw.num))
    plt.scatter(rw.x,rw.y,c=point_numbers,cmap=plt.cm.Reds,s=15)

    # 给起始点和终点添加标记
    plt.scatter(0,0,c='blue',s=50)
    plt.scatter(rw.x[-1],rw.y[-1],c='green',s=50)

    # 隐藏坐标轴
    plt.axis('off')

    #添加标题
    plt.title('Random Step Generation',fontsize=18)

    # 运行图表
    plt.show()

    keep_running = input("是否在随机一次(y/n)：")
    if keep_running == 'n':
        break
